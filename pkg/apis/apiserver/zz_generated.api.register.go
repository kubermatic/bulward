/*
Copyright 2020 The Bulward Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by apiregister-gen. DO NOT EDIT.

package apiserver

import (
	"context"
	"fmt"

	"k8s.io/apimachinery/pkg/apis/meta/internalversion"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apiserver/pkg/registry/rest"
	"sigs.k8s.io/apiserver-builder-alpha/pkg/builders"

	corev1alpha1 "github.com/kubermatic/bulward/pkg/apis/core/v1alpha1"
)

var (
	ApiserverOrganizationStorage = builders.NewApiResourceWithStorage( // Resource status endpoint
		InternalOrganization,
		func() runtime.Object { return &Organization{} },     // Register versioned resource
		func() runtime.Object { return &OrganizationList{} }, // Register versioned resource list
		NewOrganizationREST,
	)
	InternalOrganization = builders.NewInternalResource(
		"organizations",
		"Organization",
		func() runtime.Object { return &Organization{} },
		func() runtime.Object { return &OrganizationList{} },
	)
	InternalOrganizationStatus = builders.NewInternalResourceStatus(
		"organizations",
		"OrganizationStatus",
		func() runtime.Object { return &Organization{} },
		func() runtime.Object { return &OrganizationList{} },
	)
	// Registered resources and subresources
	ApiVersion = builders.NewApiGroup("apiserver.bulward.io").WithKinds(
		InternalOrganization,
		InternalOrganizationStatus,
	)

	// Required by code generated by go2idl
	AddToScheme = (&runtime.SchemeBuilder{
		ApiVersion.SchemeBuilder.AddToScheme,
		RegisterDefaults,
	}).AddToScheme
	SchemeBuilder      = ApiVersion.SchemeBuilder
	localSchemeBuilder = &SchemeBuilder
	SchemeGroupVersion = ApiVersion.GroupVersion
)

// Required by code generated by go2idl
// Kind takes an unqualified kind and returns a Group qualified GroupKind
func Kind(kind string) schema.GroupKind {
	return SchemeGroupVersion.WithKind(kind).GroupKind()
}

// Required by code generated by go2idl
// Resource takes an unqualified resource and returns a Group qualified GroupResource
func Resource(resource string) schema.GroupResource {
	return SchemeGroupVersion.WithResource(resource).GroupResource()
}

// +genclient
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type Organization struct {
	metav1.TypeMeta
	metav1.ObjectMeta
	Spec   corev1alpha1.OrganizationSpec
	Status corev1alpha1.OrganizationStatus
}

//
// Organization Functions and Structs
//
// +k8s:deepcopy-gen=false
type OrganizationStrategy struct {
	builders.DefaultStorageStrategy
}

// +k8s:deepcopy-gen=false
type OrganizationStatusStrategy struct {
	builders.DefaultStatusStorageStrategy
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type OrganizationList struct {
	metav1.TypeMeta
	metav1.ListMeta
	Items []Organization
}

func (Organization) NewStatus() interface{} {
	return corev1alpha1.OrganizationStatus{}
}

func (pc *Organization) GetStatus() interface{} {
	return pc.Status
}

func (pc *Organization) SetStatus(s interface{}) {
	pc.Status = s.(corev1alpha1.OrganizationStatus)
}

func (pc *Organization) GetSpec() interface{} {
	return pc.Spec
}

func (pc *Organization) SetSpec(s interface{}) {
	pc.Spec = s.(corev1alpha1.OrganizationSpec)
}

func (pc *Organization) GetObjectMeta() *metav1.ObjectMeta {
	return &pc.ObjectMeta
}

func (pc *Organization) SetGeneration(generation int64) {
	pc.ObjectMeta.Generation = generation
}

func (pc Organization) GetGeneration() int64 {
	return pc.ObjectMeta.Generation
}

// Registry is an interface for things that know how to store Organization.
// +k8s:deepcopy-gen=false
type OrganizationRegistry interface {
	ListOrganizations(ctx context.Context, options *internalversion.ListOptions) (*OrganizationList, error)
	GetOrganization(ctx context.Context, id string, options *metav1.GetOptions) (*Organization, error)
	CreateOrganization(ctx context.Context, id *Organization) (*Organization, error)
	UpdateOrganization(ctx context.Context, id *Organization) (*Organization, error)
	DeleteOrganization(ctx context.Context, id string) (bool, error)
}

// NewRegistry returns a new Registry interface for the given Storage. Any mismatched types will panic.
func NewOrganizationRegistry(sp builders.StandardStorageProvider) OrganizationRegistry {
	return &storageOrganization{sp}
}

// Implement Registry
// storage puts strong typing around storage calls
// +k8s:deepcopy-gen=false
type storageOrganization struct {
	builders.StandardStorageProvider
}

func (s *storageOrganization) ListOrganizations(ctx context.Context, options *internalversion.ListOptions) (*OrganizationList, error) {
	if options != nil && options.FieldSelector != nil && !options.FieldSelector.Empty() {
		return nil, fmt.Errorf("field selector not supported yet")
	}
	st := s.GetStandardStorage()
	obj, err := st.List(ctx, options)
	if err != nil {
		return nil, err
	}
	return obj.(*OrganizationList), err
}

func (s *storageOrganization) GetOrganization(ctx context.Context, id string, options *metav1.GetOptions) (*Organization, error) {
	st := s.GetStandardStorage()
	obj, err := st.Get(ctx, id, options)
	if err != nil {
		return nil, err
	}
	return obj.(*Organization), nil
}

func (s *storageOrganization) CreateOrganization(ctx context.Context, object *Organization) (*Organization, error) {
	st := s.GetStandardStorage()
	obj, err := st.Create(ctx, object, nil, &metav1.CreateOptions{})
	if err != nil {
		return nil, err
	}
	return obj.(*Organization), nil
}

func (s *storageOrganization) UpdateOrganization(ctx context.Context, object *Organization) (*Organization, error) {
	st := s.GetStandardStorage()
	obj, _, err := st.Update(ctx, object.Name, rest.DefaultUpdatedObjectInfo(object), nil, nil, false, &metav1.UpdateOptions{})
	if err != nil {
		return nil, err
	}
	return obj.(*Organization), nil
}

func (s *storageOrganization) DeleteOrganization(ctx context.Context, id string) (bool, error) {
	st := s.GetStandardStorage()
	_, sync, err := st.Delete(ctx, id, nil, &metav1.DeleteOptions{})
	return sync, err
}
